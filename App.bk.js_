import React from 'react';
import { StyleSheet, Text, View, Button, Alert, ActivityIndicator } from 'react-native';
import {
  Permissions,
  Notifications,
} from 'expo';
//import registerForPushNotificationsAsync from 'registerForPushNotificationsAsync';
const PUSH_ENDPOINT = 'https://your-server.com/users/push-token';
export default class App extends React.Component {

  constructor(props){
    super(props);
    this.state = {spin:false,notification: {}};
  }

  //-----------------------------------------------------------------------------------------------------
 
  componentWillMount() {
    this.registerForPushNotificationsAsync();
    
    
    // Handle notifications that are received or selected while the app
    // is open. If the app was closed and then opened by tapping the
    // notification (rather than just tapping the app icon to open it),
    // this function will fire on the next tick after the app starts
    // with the notification data.
    this._notificationSubscription = Notifications.addListener(this._handleNotification);
  }
  _handleNotification = (notification) => {
    this.setState({notification: notification});
  };

  

  async registerForPushNotificationsAsync() {
    const { status: existingStatus } = await Permissions.getAsync(
      Permissions.NOTIFICATIONS
    );
    let finalStatus = existingStatus;

    console.warn("Esta solicitando permisos....")
    //let token = await Notifications.getExpoPushTokenAsync();
    
    // only ask if permissions have not already been determined, because
    // iOS won't necessarily prompt the user a second time.
    if (existingStatus !== 'granted') {
      // Android remote notification permissions are granted during the app
      // install, so this will only ask on iOS
      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);
      finalStatus = status;
    }

    // Stop here if the user did not grant permissions
    if (finalStatus !== 'granted') {
      return;
    }

    // Get the token that uniquely identifies this device
    let token = await Notifications.getExpoPushTokenAsync();
    console.warn("Token registrado=>",token)
    // POST the token to your backend server from where you can retrieve it to send push notifications.
    // return fetch(PUSH_ENDPOINT, {
    //   method: 'POST',
    //   headers: {
    //     Accept: 'application/json',
    //     'Content-Type': 'application/json',
    //   },
    //   body: JSON.stringify({
    //     token: {
    //       value: token,
    //     },
    //     user: {
    //       username: 'Brent',
    //     },
    //   }),
    // });
  }
  //----------------------------------------------------------------------------------------------------------
  SpinnerButton(){
    if(this.state.spin)
    {
      return(
              <View style={styleMedia.spinnerStyle}>
                  <ActivityIndicator size={'large'}  />
                  <Button title='CANCELAR' onPress={()=>{
                    this.setState({spin:false})
                  }} />
              </View>
            );
    }
    else
    {
      return <Button title='Presioname' onPress={()=>{
        
        this.abreteSesamo()
        
        
      }} />
    }

    
  };

  async abreteSesamo(){
    //let requestx = 'http://192.168.100.253/openDoor'
    let requestx = 'http://192.168.1.253/opendoor'
    this.setState({spin:true})

    
    return await fetch(requestx,{
      method: 'get', 
      })
      .then(resp=>{
        console.warn("Despues del fetch")
        if(resp.ok)
        {
          return resp.json()
        }
        
        throw new Error('Network response was not ok.');
        
      })
      .then(r=>{
        this.setState({spin:false})
        Alert.alert(
          'CONFIRMACION',
          `Se ha abierto la puerta!!!`,
          [
            
            {text: 'OK', onPress: () => console.log('Se abrio la puerta'),  style: 'cancel'},
          ],
          { cancelable: false }
        )
          return r
      })
      .catch((error) => {
          console.warn('ERROR 1::::',error)
          
          this.setState({spin:false})
          Alert.alert(
            'CONFIRMACION',
            `Error al intentar abrir la puerta: ${error}. Revise que este en la Red adecuada.`,
            [
              
              {text: 'OK', onPress: () => console.log('No se abrio la puerta'),  style: 'cancel'},
            ],
            { cancelable: false }
          )
          return {No:"101",Error:"Error al abrir Nearshore Puerta", ErrorDetail:error}
      })
  }

  render() {
    console.warn("Origin:",this.state.notification.origin)
    console.warn("Data:",JSON.stringify(this.state.notification.data))
    return (
      <View style={styles.container}>
        <Text>NEARSHORE TECHNOLOGY</Text>
        {this.SpinnerButton()}
        <Text>Origin: {this.state.notification.origin}</Text>
        <Text>Data: {JSON.stringify(this.state.notification.data)}</Text>
      </View>
    );
  }
}

const styleMedia = {
  spinnerStyle:{
      flex:1,
      justifyContent: 'center',
      alignItems: 'center',
      maxHeight:40        
  }
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});
